import java.io.*;
import java.util.*;
import java.lang.*;
import javax.swing.*;
import javafx.application.*;
import javafx.event.*;

class ShortestPath
{
    // A utility function to find the vertex with minimum distance value,
    // from the set of vertices not yet included in shortest path tree
    static final int V=20;
    int minDistance(int dist[], Boolean sptSet[])
    {
        // Initialize min value
        int min = Integer.MAX_VALUE, min_index=-1;
 
        for (int v = 0; v < V; v++)
            if (sptSet[v] == false && dist[v] <= min)
            {
                min = dist[v];
                min_index = v;
            }
 
        return min_index;
    }
 
    // A utility function to print the constructed distance array
 
    // Funtion that implements Dijkstra's single source shortest path
    // algorithm for a graph represented using adjacency matrix
    // representation
    int[] dijkstra(int graph[][], int src, int des, int alternative[][])
    {
        int dist[] = new int[V]; // The output array. dist[i] will hold
        int[] arrrr = new int[2];
        arrrr[0] = 0;
        int prev_vertex = src;      // the shortest distance from src to i
 
        // sptSet[i] will true if vertex i is included in shortest
        // path tree or shortest distance from src to i is finalized
        Boolean sptSet[] = new Boolean[V];
 
        // Initialize all distances as INFINITE and stpSet[] as false
        for (int i = 0; i < V; i++)
        {
            dist[i] = Integer.MAX_VALUE;
            sptSet[i] = false;
        }
 
        // Distance of source vertex from itself is always 0
        dist[src] = 0;
 
        // Find shortest path for all vertices
        for (int count = 0; count < V-1; count++)
        {
            // Pick the minimum distance vertex from the set of vertices
            // not yet processed. u is always equal to src in first
            // iteration.
            int u = minDistance(dist, sptSet);
            arrrr[0] += alternative[prev_vertex][u];
            prev_vertex  = u;
 
            // Mark the picked vertex as processed
            sptSet[u] = true;
 
            // Update dist value of the adjacent vertices of the
            // picked vertex.
            for (int v = 0; v < V; v++)
 
                // Update dist[v] only if is not in sptSet, there is an
                // edge from u to v, and total weight of path from src to
                // v through u is smaller than current value of dist[v]
                if (!sptSet[v] && graph[u][v]!=0 &&
                        dist[u] != Integer.MAX_VALUE &&
                        dist[u]+graph[u][v] < dist[v])
                    dist[v] = dist[u] + graph[u][v];
        }
 
        // print the constructed distance array
        arrrr[1] = dist[des-1];
        return arrrr;
    }
}

public class game
{
    public static void main(String[] args)
    throws IOException
    {      
        String temp;
        int source_city;
        int destination_city;
        double priority;
        JFrame jf;
        jf = new JFrame();
        JOptionPane.showMessageDialog(jf,"HI !! Our Project Helps You To Accomplish Your Journey Hassle-free Using Our Software. You Have 3 Options To Choose From:");
        JOptionPane.showMessageDialog(jf,"Take A Flight From One City To Another");
        JOptionPane.showMessageDialog(jf,"Travel via Train From One City To Another");
        JOptionPane.showMessageDialog(jf, "Book A Bus From One City To Another");
        JOptionPane.showMessageDialog(jf,"Each Means of Transport From One City To Another Has Its Own Travel Cost and Travel Time");
        JOptionPane.showMessageDialog(jf,"Our Software Is Specially Designed To Help You Select One Of The Above Mentioned Means Of Transport According To Your Priority Of Travel Cost Over Travel Time");
        JOptionPane.showMessageDialog(jf,"Now, You Are Required To Enter Source City Number And Destination City Number");
        temp = JOptionPane.showInputDialog(jf,"Enter Source City Number");
        source_city = Integer.parseInt(temp);
        temp = JOptionPane.showInputDialog(jf, "Enter Destination City Number");
        destination_city = Integer.parseInt(temp);
        temp = JOptionPane.showInputDialog(jf, "Choose between Priority Of Price Or Time");
        //priority = Double.parseDouble(temp);
        int[][] bus_price = new int[20][20];
        int[][] bus_time = new int[20][20];
        int[][] train_price = new int[20][20];
        int[][] train_time = new int[20][20];
        int[][] flight_price = new int[20][20];
        int[][] flight_time = new int[20][20];
        FileReader fr = new FileReader("bus.txt");
        BufferedReader br = new BufferedReader(fr);
        String input = br.readLine();
        int[] array = new int[4];
        while(input != null)
        {
            String[] input_split = input.split(",",-1);
            int i =0;
            for(String a : input_split)
            {   
                array[i] = Integer.parseInt(a);
                //System.out.println(a);
                i++;
            }
            bus_price[array[0] - 1][array[1]-1] = array[2];
            bus_time[array[0] - 1][array[1]-1] = array[3];
            input = br.readLine();
        }
        fr = new FileReader("train.txt");
        br = new BufferedReader(fr);
        input = br.readLine();
        while(input != null)
        {   
            String[] input_split = input.split(",",-1);
            int i =0;
            for(String a : input_split)
            {   
                array[i] = Integer.parseInt(a);
                //System.out.println(a);
                i++;
            }
            train_price[array[0] - 1][array[1]-1] = array[2];
            train_time[array[0] - 1][array[1]-1] = array[3];
            input = br.readLine();
        }
        fr = new FileReader("flight.txt");
        br = new BufferedReader(fr);
        input = br.readLine();
        while(input != null)
        {
            String[] input_split = input.split(",",-1);
            int i =0;
            for(String a : input_split)
            {   
                array[i] = Integer.parseInt(a);
                //System.out.println(a);
                i++;
            }
            flight_price[array[0] - 1][array[1]-1] = array[2];
            flight_time[array[0] - 1][array[1]-1] = array[3];
            input = br.readLine();
        }

        ShortestPath st = new ShortestPath();
        if(temp.equals("Price"))
        {
            int min_bus_price = (st.dijkstra(bus_price, source_city-1, destination_city,bus_time))[0];
            int min_train_price = (st.dijkstra(train_price, source_city-1, destination_city, train_time))[0];
            int min_flight_price = (st.dijkstra(flight_price, source_city-1, destination_city, flight_time))[0];
            int b_t = (st.dijkstra(bus_price, source_city-1, destination_city,bus_time))[1];
            int t_t = (st.dijkstra(bus_price, source_city-1, destination_city,bus_time))[1];
            int f_t = (st.dijkstra(bus_price, source_city-1, destination_city,bus_time))[1];
            System.out.println("Price range is " + min_bus_price+ " " + min_train_price+" "+min_flight_price);
            System.out.println("Time range is " + b_t+" "+t_t+" "+f_t);
        }
        else
        {
            int min_bus_time = (st.dijkstra(bus_time, source_city-1, destination_city,bus_price))[0];
            int min_train_time = (st.dijkstra(train_time, source_city-1, destination_city, train_price))[0];
            int min_flight_time = (st.dijkstra(flight_time, source_city-1, destination_city, flight_price))[0];
            int b_p = (st.dijkstra(bus_time, source_city-1, destination_city,bus_price))[1];
            int t_p= (st.dijkstra(bus_time, source_city-1, destination_city,bus_price))[1];
            int f_p = (st.dijkstra(bus_time, source_city-1, destination_city,bus_price))[1];
            System.out.println("Time range is " + min_bus_time+ " " + min_train_time+" "+min_flight_time);
            System.out.println("Price range is " + b_p+" "+t_p+" "+f_p);
        }
        
       

        System.exit(0);
    }
}